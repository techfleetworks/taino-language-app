"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@aws-sdk+xml-builder@3.693.0";
exports.ids = ["vendor-chunks/@aws-sdk+xml-builder@3.693.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@aws-sdk+xml-builder@3.693.0/node_modules/@aws-sdk/xml-builder/dist-cjs/index.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@aws-sdk+xml-builder@3.693.0/node_modules/@aws-sdk/xml-builder/dist-cjs/index.js ***!
  \*************************************************************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  XmlNode: () => XmlNode,\n  XmlText: () => XmlText\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/escape-attribute.ts\nfunction escapeAttribute(value) {\n  return value.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\");\n}\n__name(escapeAttribute, \"escapeAttribute\");\n\n// src/escape-element.ts\nfunction escapeElement(value) {\n  return value.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\\r/g, \"&#x0D;\").replace(/\\n/g, \"&#x0A;\").replace(/\\u0085/g, \"&#x85;\").replace(/\\u2028/, \"&#x2028;\");\n}\n__name(escapeElement, \"escapeElement\");\n\n// src/XmlText.ts\nvar _XmlText = class _XmlText {\n  constructor(value) {\n    this.value = value;\n  }\n  toString() {\n    return escapeElement(\"\" + this.value);\n  }\n};\n__name(_XmlText, \"XmlText\");\nvar XmlText = _XmlText;\n\n// src/XmlNode.ts\nvar _XmlNode = class _XmlNode {\n  constructor(name, children = []) {\n    this.name = name;\n    this.children = children;\n    this.attributes = {};\n  }\n  static of(name, childText, withName) {\n    const node = new _XmlNode(name);\n    if (childText !== void 0) {\n      node.addChildNode(new XmlText(childText));\n    }\n    if (withName !== void 0) {\n      node.withName(withName);\n    }\n    return node;\n  }\n  withName(name) {\n    this.name = name;\n    return this;\n  }\n  addAttribute(name, value) {\n    this.attributes[name] = value;\n    return this;\n  }\n  addChildNode(child) {\n    this.children.push(child);\n    return this;\n  }\n  removeAttribute(name) {\n    delete this.attributes[name];\n    return this;\n  }\n  /**\n   * @internal\n   * Alias of {@link XmlNode#withName(string)} for codegen brevity.\n   */\n  n(name) {\n    this.name = name;\n    return this;\n  }\n  /**\n   * @internal\n   * Alias of {@link XmlNode#addChildNode(string)} for codegen brevity.\n   */\n  c(child) {\n    this.children.push(child);\n    return this;\n  }\n  /**\n   * @internal\n   * Checked version of {@link XmlNode#addAttribute(string)} for codegen brevity.\n   */\n  a(name, value) {\n    if (value != null) {\n      this.attributes[name] = value;\n    }\n    return this;\n  }\n  /**\n   * Create a child node.\n   * Used in serialization of string fields.\n   * @internal\n   */\n  cc(input, field, withName = field) {\n    if (input[field] != null) {\n      const node = _XmlNode.of(field, input[field]).withName(withName);\n      this.c(node);\n    }\n  }\n  /**\n   * Creates list child nodes.\n   * @internal\n   */\n  l(input, listName, memberName, valueProvider) {\n    if (input[listName] != null) {\n      const nodes = valueProvider();\n      nodes.map((node) => {\n        node.withName(memberName);\n        this.c(node);\n      });\n    }\n  }\n  /**\n   * Creates list child nodes with container.\n   * @internal\n   */\n  lc(input, listName, memberName, valueProvider) {\n    if (input[listName] != null) {\n      const nodes = valueProvider();\n      const containerNode = new _XmlNode(memberName);\n      nodes.map((node) => {\n        containerNode.c(node);\n      });\n      this.c(containerNode);\n    }\n  }\n  toString() {\n    const hasChildren = Boolean(this.children.length);\n    let xmlText = `<${this.name}`;\n    const attributes = this.attributes;\n    for (const attributeName of Object.keys(attributes)) {\n      const attribute = attributes[attributeName];\n      if (attribute != null) {\n        xmlText += ` ${attributeName}=\"${escapeAttribute(\"\" + attribute)}\"`;\n      }\n    }\n    return xmlText += !hasChildren ? \"/>\" : `>${this.children.map((c) => c.toString()).join(\"\")}</${this.name}>`;\n  }\n};\n__name(_XmlNode, \"XmlNode\");\nvar XmlNode = _XmlNode;\n// Annotate the CommonJS export names for ESM import in node:\n\n0 && (0);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGF3cy1zZGsreG1sLWJ1aWxkZXJAMy42OTMuMC9ub2RlX21vZHVsZXMvQGF3cy1zZGsveG1sLWJ1aWxkZXIvZGlzdC1janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCwyQkFBMkI7QUFDdkY7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhOztBQUVuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQSxtQ0FBbUMsc0JBQXNCLHNCQUFzQix3QkFBd0I7QUFDdkc7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUNBQW1DLHdCQUF3Qix3QkFBd0Isc0JBQXNCLHNCQUFzQix5QkFBeUIseUJBQXlCLDZCQUE2Qiw4QkFBOEI7QUFDNU87QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdDQUFnQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG9DQUFvQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixVQUFVO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGNBQWMsSUFBSSxnQ0FBZ0M7QUFDekU7QUFDQTtBQUNBLGdEQUFnRCxnREFBZ0QsSUFBSSxVQUFVO0FBQzlHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTSxDQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVzc29uLWF1dGhvcmluZy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AYXdzLXNkayt4bWwtYnVpbGRlckAzLjY5My4wL25vZGVfbW9kdWxlcy9AYXdzLXNkay94bWwtYnVpbGRlci9kaXN0LWNqcy9pbmRleC5qcz9hYTgwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIFhtbE5vZGU6ICgpID0+IFhtbE5vZGUsXG4gIFhtbFRleHQ6ICgpID0+IFhtbFRleHRcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuXG4vLyBzcmMvZXNjYXBlLWF0dHJpYnV0ZS50c1xuZnVuY3Rpb24gZXNjYXBlQXR0cmlidXRlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKC8mL2csIFwiJmFtcDtcIikucmVwbGFjZSgvPC9nLCBcIiZsdDtcIikucmVwbGFjZSgvPi9nLCBcIiZndDtcIikucmVwbGFjZSgvXCIvZywgXCImcXVvdDtcIik7XG59XG5fX25hbWUoZXNjYXBlQXR0cmlidXRlLCBcImVzY2FwZUF0dHJpYnV0ZVwiKTtcblxuLy8gc3JjL2VzY2FwZS1lbGVtZW50LnRzXG5mdW5jdGlvbiBlc2NhcGVFbGVtZW50KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKC8mL2csIFwiJmFtcDtcIikucmVwbGFjZSgvXCIvZywgXCImcXVvdDtcIikucmVwbGFjZSgvJy9nLCBcIiZhcG9zO1wiKS5yZXBsYWNlKC88L2csIFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csIFwiJmd0O1wiKS5yZXBsYWNlKC9cXHIvZywgXCImI3gwRDtcIikucmVwbGFjZSgvXFxuL2csIFwiJiN4MEE7XCIpLnJlcGxhY2UoL1xcdTAwODUvZywgXCImI3g4NTtcIikucmVwbGFjZSgvXFx1MjAyOC8sIFwiJiN4MjAyODtcIik7XG59XG5fX25hbWUoZXNjYXBlRWxlbWVudCwgXCJlc2NhcGVFbGVtZW50XCIpO1xuXG4vLyBzcmMvWG1sVGV4dC50c1xudmFyIF9YbWxUZXh0ID0gY2xhc3MgX1htbFRleHQge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZXNjYXBlRWxlbWVudChcIlwiICsgdGhpcy52YWx1ZSk7XG4gIH1cbn07XG5fX25hbWUoX1htbFRleHQsIFwiWG1sVGV4dFwiKTtcbnZhciBYbWxUZXh0ID0gX1htbFRleHQ7XG5cbi8vIHNyYy9YbWxOb2RlLnRzXG52YXIgX1htbE5vZGUgPSBjbGFzcyBfWG1sTm9kZSB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGNoaWxkcmVuID0gW10pIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcbiAgfVxuICBzdGF0aWMgb2YobmFtZSwgY2hpbGRUZXh0LCB3aXRoTmFtZSkge1xuICAgIGNvbnN0IG5vZGUgPSBuZXcgX1htbE5vZGUobmFtZSk7XG4gICAgaWYgKGNoaWxkVGV4dCAhPT0gdm9pZCAwKSB7XG4gICAgICBub2RlLmFkZENoaWxkTm9kZShuZXcgWG1sVGV4dChjaGlsZFRleHQpKTtcbiAgICB9XG4gICAgaWYgKHdpdGhOYW1lICE9PSB2b2lkIDApIHtcbiAgICAgIG5vZGUud2l0aE5hbWUod2l0aE5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICB3aXRoTmFtZShuYW1lKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBhZGRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLmF0dHJpYnV0ZXNbbmFtZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBhZGRDaGlsZE5vZGUoY2hpbGQpIHtcbiAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJlbW92ZUF0dHJpYnV0ZShuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuYXR0cmlidXRlc1tuYW1lXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEFsaWFzIG9mIHtAbGluayBYbWxOb2RlI3dpdGhOYW1lKHN0cmluZyl9IGZvciBjb2RlZ2VuIGJyZXZpdHkuXG4gICAqL1xuICBuKG5hbWUpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQWxpYXMgb2Yge0BsaW5rIFhtbE5vZGUjYWRkQ2hpbGROb2RlKHN0cmluZyl9IGZvciBjb2RlZ2VuIGJyZXZpdHkuXG4gICAqL1xuICBjKGNoaWxkKSB7XG4gICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIENoZWNrZWQgdmVyc2lvbiBvZiB7QGxpbmsgWG1sTm9kZSNhZGRBdHRyaWJ1dGUoc3RyaW5nKX0gZm9yIGNvZGVnZW4gYnJldml0eS5cbiAgICovXG4gIGEobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgdGhpcy5hdHRyaWJ1dGVzW25hbWVdID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjaGlsZCBub2RlLlxuICAgKiBVc2VkIGluIHNlcmlhbGl6YXRpb24gb2Ygc3RyaW5nIGZpZWxkcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBjYyhpbnB1dCwgZmllbGQsIHdpdGhOYW1lID0gZmllbGQpIHtcbiAgICBpZiAoaW5wdXRbZmllbGRdICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBfWG1sTm9kZS5vZihmaWVsZCwgaW5wdXRbZmllbGRdKS53aXRoTmFtZSh3aXRoTmFtZSk7XG4gICAgICB0aGlzLmMobm9kZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGxpc3QgY2hpbGQgbm9kZXMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbChpbnB1dCwgbGlzdE5hbWUsIG1lbWJlck5hbWUsIHZhbHVlUHJvdmlkZXIpIHtcbiAgICBpZiAoaW5wdXRbbGlzdE5hbWVdICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IG5vZGVzID0gdmFsdWVQcm92aWRlcigpO1xuICAgICAgbm9kZXMubWFwKChub2RlKSA9PiB7XG4gICAgICAgIG5vZGUud2l0aE5hbWUobWVtYmVyTmFtZSk7XG4gICAgICAgIHRoaXMuYyhub2RlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBsaXN0IGNoaWxkIG5vZGVzIHdpdGggY29udGFpbmVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGxjKGlucHV0LCBsaXN0TmFtZSwgbWVtYmVyTmFtZSwgdmFsdWVQcm92aWRlcikge1xuICAgIGlmIChpbnB1dFtsaXN0TmFtZV0gIT0gbnVsbCkge1xuICAgICAgY29uc3Qgbm9kZXMgPSB2YWx1ZVByb3ZpZGVyKCk7XG4gICAgICBjb25zdCBjb250YWluZXJOb2RlID0gbmV3IF9YbWxOb2RlKG1lbWJlck5hbWUpO1xuICAgICAgbm9kZXMubWFwKChub2RlKSA9PiB7XG4gICAgICAgIGNvbnRhaW5lck5vZGUuYyhub2RlKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jKGNvbnRhaW5lck5vZGUpO1xuICAgIH1cbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICBjb25zdCBoYXNDaGlsZHJlbiA9IEJvb2xlYW4odGhpcy5jaGlsZHJlbi5sZW5ndGgpO1xuICAgIGxldCB4bWxUZXh0ID0gYDwke3RoaXMubmFtZX1gO1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG4gICAgZm9yIChjb25zdCBhdHRyaWJ1dGVOYW1lIG9mIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpKSB7XG4gICAgICBjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdO1xuICAgICAgaWYgKGF0dHJpYnV0ZSAhPSBudWxsKSB7XG4gICAgICAgIHhtbFRleHQgKz0gYCAke2F0dHJpYnV0ZU5hbWV9PVwiJHtlc2NhcGVBdHRyaWJ1dGUoXCJcIiArIGF0dHJpYnV0ZSl9XCJgO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geG1sVGV4dCArPSAhaGFzQ2hpbGRyZW4gPyBcIi8+XCIgOiBgPiR7dGhpcy5jaGlsZHJlbi5tYXAoKGMpID0+IGMudG9TdHJpbmcoKSkuam9pbihcIlwiKX08LyR7dGhpcy5uYW1lfT5gO1xuICB9XG59O1xuX19uYW1lKF9YbWxOb2RlLCBcIlhtbE5vZGVcIik7XG52YXIgWG1sTm9kZSA9IF9YbWxOb2RlO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgWG1sTm9kZSxcbiAgWG1sVGV4dFxufSk7XG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@aws-sdk+xml-builder@3.693.0/node_modules/@aws-sdk/xml-builder/dist-cjs/index.js\n");

/***/ })

};
;