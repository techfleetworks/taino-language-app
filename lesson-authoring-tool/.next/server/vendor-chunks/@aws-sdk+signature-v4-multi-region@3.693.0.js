"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@aws-sdk+signature-v4-multi-region@3.693.0";
exports.ids = ["vendor-chunks/@aws-sdk+signature-v4-multi-region@3.693.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@aws-sdk+signature-v4-multi-region@3.693.0/node_modules/@aws-sdk/signature-v4-multi-region/dist-cjs/index.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@aws-sdk+signature-v4-multi-region@3.693.0/node_modules/@aws-sdk/signature-v4-multi-region/dist-cjs/index.js ***!
  \*****************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  SignatureV4MultiRegion: () => SignatureV4MultiRegion,\n  signatureV4CrtContainer: () => signatureV4CrtContainer\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/SignatureV4MultiRegion.ts\nvar import_middleware_sdk_s3 = __webpack_require__(/*! @aws-sdk/middleware-sdk-s3 */ \"(rsc)/./node_modules/.pnpm/@aws-sdk+middleware-sdk-s3@3.693.0/node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js\");\n\n// src/signature-v4-crt-container.ts\nvar signatureV4CrtContainer = {\n  CrtSignerV4: null\n};\n\n// src/SignatureV4MultiRegion.ts\nvar _SignatureV4MultiRegion = class _SignatureV4MultiRegion {\n  constructor(options) {\n    this.sigv4Signer = new import_middleware_sdk_s3.SignatureV4S3Express(options);\n    this.signerOptions = options;\n  }\n  async sign(requestToSign, options = {}) {\n    if (options.signingRegion === \"*\") {\n      if (this.signerOptions.runtime !== \"node\")\n        throw new Error(\"This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js\");\n      return this.getSigv4aSigner().sign(requestToSign, options);\n    }\n    return this.sigv4Signer.sign(requestToSign, options);\n  }\n  /**\n   * Sign with alternate credentials to the ones provided in the constructor.\n   */\n  async signWithCredentials(requestToSign, credentials, options = {}) {\n    if (options.signingRegion === \"*\") {\n      if (this.signerOptions.runtime !== \"node\")\n        throw new Error(\"This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js\");\n      return this.getSigv4aSigner().signWithCredentials(requestToSign, credentials, options);\n    }\n    return this.sigv4Signer.signWithCredentials(requestToSign, credentials, options);\n  }\n  async presign(originalRequest, options = {}) {\n    if (options.signingRegion === \"*\") {\n      if (this.signerOptions.runtime !== \"node\")\n        throw new Error(\"This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js\");\n      return this.getSigv4aSigner().presign(originalRequest, options);\n    }\n    return this.sigv4Signer.presign(originalRequest, options);\n  }\n  async presignWithCredentials(originalRequest, credentials, options = {}) {\n    if (options.signingRegion === \"*\") {\n      throw new Error(\"Method presignWithCredentials is not supported for [signingRegion=*].\");\n    }\n    return this.sigv4Signer.presignWithCredentials(originalRequest, credentials, options);\n  }\n  getSigv4aSigner() {\n    if (!this.sigv4aSigner) {\n      let CrtSignerV4 = null;\n      try {\n        CrtSignerV4 = signatureV4CrtContainer.CrtSignerV4;\n        if (typeof CrtSignerV4 !== \"function\")\n          throw new Error();\n      } catch (e) {\n        e.message = `${e.message}\nPlease check whether you have installed the \"@aws-sdk/signature-v4-crt\" package explicitly. \nYou must also register the package by calling [require(\"@aws-sdk/signature-v4-crt\");] or an ESM equivalent such as [import \"@aws-sdk/signature-v4-crt\";]. \nFor more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`;\n        throw e;\n      }\n      this.sigv4aSigner = new CrtSignerV4({\n        ...this.signerOptions,\n        signingAlgorithm: 1\n      });\n    }\n    return this.sigv4aSigner;\n  }\n};\n__name(_SignatureV4MultiRegion, \"SignatureV4MultiRegion\");\nvar SignatureV4MultiRegion = _SignatureV4MultiRegion;\n// Annotate the CommonJS export names for ESM import in node:\n\n0 && (0);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGF3cy1zZGsrc2lnbmF0dXJlLXY0LW11bHRpLXJlZ2lvbkAzLjY5My4wL25vZGVfbW9kdWxlcy9AYXdzLXNkay9zaWduYXR1cmUtdjQtbXVsdGktcmVnaW9uL2Rpc3QtY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsMkJBQTJCO0FBQ3ZGO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTs7QUFFbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBLCtCQUErQixtQkFBTyxDQUFDLDBKQUE0Qjs7QUFFbkU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUix1QkFBdUI7QUFDdkI7QUFDQSxvRkFBb0YsbUVBQW1FO0FBQ3ZKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNLENBR0wiLCJzb3VyY2VzIjpbIi9Vc2Vycy9rYXJlbGxlL3ZzY3Byb2plY3RzL3RlY2gtZmxlZXQvdGFpbm8tbGFuZ3VhZ2UtYXBwL2xlc3Nvbi1hdXRob3Jpbmcvbm9kZV9tb2R1bGVzLy5wbnBtL0Bhd3Mtc2RrK3NpZ25hdHVyZS12NC1tdWx0aS1yZWdpb25AMy42OTMuMC9ub2RlX21vZHVsZXMvQGF3cy1zZGsvc2lnbmF0dXJlLXY0LW11bHRpLXJlZ2lvbi9kaXN0LWNqcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBTaWduYXR1cmVWNE11bHRpUmVnaW9uOiAoKSA9PiBTaWduYXR1cmVWNE11bHRpUmVnaW9uLFxuICBzaWduYXR1cmVWNENydENvbnRhaW5lcjogKCkgPT4gc2lnbmF0dXJlVjRDcnRDb250YWluZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuXG4vLyBzcmMvU2lnbmF0dXJlVjRNdWx0aVJlZ2lvbi50c1xudmFyIGltcG9ydF9taWRkbGV3YXJlX3Nka19zMyA9IHJlcXVpcmUoXCJAYXdzLXNkay9taWRkbGV3YXJlLXNkay1zM1wiKTtcblxuLy8gc3JjL3NpZ25hdHVyZS12NC1jcnQtY29udGFpbmVyLnRzXG52YXIgc2lnbmF0dXJlVjRDcnRDb250YWluZXIgPSB7XG4gIENydFNpZ25lclY0OiBudWxsXG59O1xuXG4vLyBzcmMvU2lnbmF0dXJlVjRNdWx0aVJlZ2lvbi50c1xudmFyIF9TaWduYXR1cmVWNE11bHRpUmVnaW9uID0gY2xhc3MgX1NpZ25hdHVyZVY0TXVsdGlSZWdpb24ge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5zaWd2NFNpZ25lciA9IG5ldyBpbXBvcnRfbWlkZGxld2FyZV9zZGtfczMuU2lnbmF0dXJlVjRTM0V4cHJlc3Mob3B0aW9ucyk7XG4gICAgdGhpcy5zaWduZXJPcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICBhc3luYyBzaWduKHJlcXVlc3RUb1NpZ24sIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmIChvcHRpb25zLnNpZ25pbmdSZWdpb24gPT09IFwiKlwiKSB7XG4gICAgICBpZiAodGhpcy5zaWduZXJPcHRpb25zLnJ1bnRpbWUgIT09IFwibm9kZVwiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHJlcXVlc3QgcmVxdWlyZXMgc2lnbmluZyB3aXRoIFNpZ1Y0QXN5bW1ldHJpYyBhbGdvcml0aG0uIEl0J3Mgb25seSBhdmFpbGFibGUgaW4gTm9kZS5qc1wiKTtcbiAgICAgIHJldHVybiB0aGlzLmdldFNpZ3Y0YVNpZ25lcigpLnNpZ24ocmVxdWVzdFRvU2lnbiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNpZ3Y0U2lnbmVyLnNpZ24ocmVxdWVzdFRvU2lnbiwgb3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIFNpZ24gd2l0aCBhbHRlcm5hdGUgY3JlZGVudGlhbHMgdG8gdGhlIG9uZXMgcHJvdmlkZWQgaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAgKi9cbiAgYXN5bmMgc2lnbldpdGhDcmVkZW50aWFscyhyZXF1ZXN0VG9TaWduLCBjcmVkZW50aWFscywgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKG9wdGlvbnMuc2lnbmluZ1JlZ2lvbiA9PT0gXCIqXCIpIHtcbiAgICAgIGlmICh0aGlzLnNpZ25lck9wdGlvbnMucnVudGltZSAhPT0gXCJub2RlXCIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgcmVxdWVzdCByZXF1aXJlcyBzaWduaW5nIHdpdGggU2lnVjRBc3ltbWV0cmljIGFsZ29yaXRobS4gSXQncyBvbmx5IGF2YWlsYWJsZSBpbiBOb2RlLmpzXCIpO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2lndjRhU2lnbmVyKCkuc2lnbldpdGhDcmVkZW50aWFscyhyZXF1ZXN0VG9TaWduLCBjcmVkZW50aWFscywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNpZ3Y0U2lnbmVyLnNpZ25XaXRoQ3JlZGVudGlhbHMocmVxdWVzdFRvU2lnbiwgY3JlZGVudGlhbHMsIG9wdGlvbnMpO1xuICB9XG4gIGFzeW5jIHByZXNpZ24ob3JpZ2luYWxSZXF1ZXN0LCBvcHRpb25zID0ge30pIHtcbiAgICBpZiAob3B0aW9ucy5zaWduaW5nUmVnaW9uID09PSBcIipcIikge1xuICAgICAgaWYgKHRoaXMuc2lnbmVyT3B0aW9ucy5ydW50aW1lICE9PSBcIm5vZGVcIilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyByZXF1ZXN0IHJlcXVpcmVzIHNpZ25pbmcgd2l0aCBTaWdWNEFzeW1tZXRyaWMgYWxnb3JpdGhtLiBJdCdzIG9ubHkgYXZhaWxhYmxlIGluIE5vZGUuanNcIik7XG4gICAgICByZXR1cm4gdGhpcy5nZXRTaWd2NGFTaWduZXIoKS5wcmVzaWduKG9yaWdpbmFsUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNpZ3Y0U2lnbmVyLnByZXNpZ24ob3JpZ2luYWxSZXF1ZXN0LCBvcHRpb25zKTtcbiAgfVxuICBhc3luYyBwcmVzaWduV2l0aENyZWRlbnRpYWxzKG9yaWdpbmFsUmVxdWVzdCwgY3JlZGVudGlhbHMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmIChvcHRpb25zLnNpZ25pbmdSZWdpb24gPT09IFwiKlwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2QgcHJlc2lnbldpdGhDcmVkZW50aWFscyBpcyBub3Qgc3VwcG9ydGVkIGZvciBbc2lnbmluZ1JlZ2lvbj0qXS5cIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNpZ3Y0U2lnbmVyLnByZXNpZ25XaXRoQ3JlZGVudGlhbHMob3JpZ2luYWxSZXF1ZXN0LCBjcmVkZW50aWFscywgb3B0aW9ucyk7XG4gIH1cbiAgZ2V0U2lndjRhU2lnbmVyKCkge1xuICAgIGlmICghdGhpcy5zaWd2NGFTaWduZXIpIHtcbiAgICAgIGxldCBDcnRTaWduZXJWNCA9IG51bGw7XG4gICAgICB0cnkge1xuICAgICAgICBDcnRTaWduZXJWNCA9IHNpZ25hdHVyZVY0Q3J0Q29udGFpbmVyLkNydFNpZ25lclY0O1xuICAgICAgICBpZiAodHlwZW9mIENydFNpZ25lclY0ICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGUubWVzc2FnZSA9IGAke2UubWVzc2FnZX1cblBsZWFzZSBjaGVjayB3aGV0aGVyIHlvdSBoYXZlIGluc3RhbGxlZCB0aGUgXCJAYXdzLXNkay9zaWduYXR1cmUtdjQtY3J0XCIgcGFja2FnZSBleHBsaWNpdGx5LiBcbllvdSBtdXN0IGFsc28gcmVnaXN0ZXIgdGhlIHBhY2thZ2UgYnkgY2FsbGluZyBbcmVxdWlyZShcIkBhd3Mtc2RrL3NpZ25hdHVyZS12NC1jcnRcIik7XSBvciBhbiBFU00gZXF1aXZhbGVudCBzdWNoIGFzIFtpbXBvcnQgXCJAYXdzLXNkay9zaWduYXR1cmUtdjQtY3J0XCI7XS4gXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiBwbGVhc2UgZ28gdG8gaHR0cHM6Ly9naXRodWIuY29tL2F3cy9hd3Mtc2RrLWpzLXYzI2Z1bmN0aW9uYWxpdHktcmVxdWlyaW5nLWF3cy1jb21tb24tcnVudGltZS1jcnRgO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgICAgdGhpcy5zaWd2NGFTaWduZXIgPSBuZXcgQ3J0U2lnbmVyVjQoe1xuICAgICAgICAuLi50aGlzLnNpZ25lck9wdGlvbnMsXG4gICAgICAgIHNpZ25pbmdBbGdvcml0aG06IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zaWd2NGFTaWduZXI7XG4gIH1cbn07XG5fX25hbWUoX1NpZ25hdHVyZVY0TXVsdGlSZWdpb24sIFwiU2lnbmF0dXJlVjRNdWx0aVJlZ2lvblwiKTtcbnZhciBTaWduYXR1cmVWNE11bHRpUmVnaW9uID0gX1NpZ25hdHVyZVY0TXVsdGlSZWdpb247XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBTaWduYXR1cmVWNE11bHRpUmVnaW9uLFxuICBzaWduYXR1cmVWNENydENvbnRhaW5lclxufSk7XG5cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@aws-sdk+signature-v4-multi-region@3.693.0/node_modules/@aws-sdk/signature-v4-multi-region/dist-cjs/index.js\n");

/***/ })

};
;